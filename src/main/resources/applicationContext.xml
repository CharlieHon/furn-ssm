<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--spring配置文件：主要配置和业务相关的，比如数据源，事务控制等-->
    <context:component-scan base-package="com.charlie.furn">
        <!--use-default-filters="true" 指的是使用默认过滤器扫描 @Component @Service @Controller 等注解配置的Bean
        如果设置为false，则Spring将不会自动包含默认的组件注解。这种情况下，就必须手动添加想要被Spring扫描的组件类型
        -->
        <!--扫描com.charlie.furn包，不扫描controller，因为以及在springmvc配置-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入外部的jdbc.properties文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据源对象-DataSource Druid-->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="pooledDataSource">
        <!--给数据源对象配置属性值-->
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.pwd}"/>
        <property name="driverClassName" value="${jdbc.driven}"/>
        <property name="url" value="${jdbc.url}"/>
    </bean>

    <!--配置spring和mybatis整合
    1. 在项目中引入mybatis整合到spring的适配库/包
    -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--指定mybatis的全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定数据源-->
        <property name="dataSource" ref="pooledDataSource"/>
        <!--指定mybatis的mapper文件[XxxMapper.xml]位置
        1. 在开发中，通常将mapper.xml放在类路径 resources/mapper 下
        2. 所以在这里指定value是 classpath"mapper/*.xml
        -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--配置扫描器，将mybatis接口的实现类放入到ioc容器中
    1. 我们的mapper接口放在 com.charlie.furn.dao 下
    2. 因为mybatis就是处于DAO层，用于操作DB
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--
        1. 扫描所有的dao接口的实现，加入到ioc容器中
        2. 这里dao接口，就是mapper接口
        -->
        <property name="basePackage" value="com.charlie.furn.dao"/>
    </bean>

    <!--配置事务管理器-对象
    1. DataSourceTransactionManager 这个对象是进行事务管理的
    2. 一定要配置数据源属性，这样指定该事务管理器是对哪个数据源进行事务控制
    -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>

    <!--配置启用基于注解的声明式事务管理器，这里使用xml配置+切入表达式-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <aop:config>
        <aop:pointcut id="txPoint" expression="execution(* com.charlie.furn.service..*(..))"/>
        <!--配置事务增强：使用txAdvice，指定规则对txPoint进行切入-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!--配置事务增强，也就是指定事务如何切入-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!--*代表所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get开始的所有方法，都认为是只读，进行调优-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

</beans>